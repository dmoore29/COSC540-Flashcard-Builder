diff --git a/README.md b/README.md
index d47b495..ac170d6 100644
--- a/README.md
+++ b/README.md
@@ -1,8 +1,8 @@
 # COSC540-Flashcard Builder
-Requirments
+## Requirments
 * Install Node JS (link) https://nodejs.org/en/download
 
-How to download and run
+## How to download and run
 * Switch to development branch
 * clone development branck
 * Open file in editor
@@ -12,7 +12,7 @@ How to download and run
 * navigate to http://localhost:3000
 * Now the project is running
 
-File Structure
+## File Structure
 * App - contains the main (home) page and layout
 * Components - will hold all of the parts that we will use within the app. Reusable components is the goal.
 * Pages - a page is made up of multiple components. The file name is the routing extension for that page Example, dash.jsx (Dashboard page) will be http://localhost:3000/dash\
@@ -21,7 +21,81 @@ File Structure
 * Utils - can be used for any json files and context files
 * .env - you will need to make this file since we block it from being uploaded.  This file holds any secret keys or passwords we may use.
 
-Package.json
+## Package.json
 * This holds the list of dependencies that we use
   * Example Axios and express deals with server calls. bcrypt is used for hashing passwords
 * Be careful when updating dependencies, it can break the app.
+
+## Unit Tests
+* Tests are written using Jest and React Testing Library.
+* To install all dependencies (including devDependencies):  
+  ```bash
+  npm install
+  ```
+* To run both unit and integration tests together:  
+  ```bash
+  npm test
+  ```
+* To run tests in watch mode (re‑runs on file changes):  
+  ```bash
+  npm run test:watch
+  ```
+* To run tests with a coverage report:  
+  ```bash
+  npm run test:ci
+  ```
+### How the unit tests work
+1. **Location**  
+   Unit tests live in the `__tests__/` directory, mirroring your `components/` and `lib/` folders.
+2. **Isolation via mocking**  
+   External dependencies (e.g. HTTP calls, Next.js router) are mocked with `jest.mock()`, so tests focus on a single function or component.
+3. **Pure function tests**  
+   Utility modules like `lib/hash.js` are invoked directly and their return values asserted.
+4. **Component tests under jsdom**  
+   React components are rendered in a simulated browser (`jsdom`) using `@testing-library/react`, and user interactions are simulated via `@testing-library/user-event`.
+5. **Babel & alias support**  
+   Jest uses `babel-jest` to transform ESModule/JSX syntax and resolve aliases (`@/…`), so tests can match your source code style.
+6. **Fast feedback**  
+   Because no real I/O or external servers are involved, unit tests run in milliseconds and can be run in watch mode for rapid development.
+
+
+## Integration Tests
+* Integration tests live in the `integration-tests/` directory.
+* They spin up an in‑memory MongoDB, mount your real API route handlers via a mini Express server, and drive your React components end‑to‑end.
+* To run only integration tests:  
+  ```bash
+  npm run test:int
+  ```
+* To run both unit and integration tests together:  
+  ```bash
+  npm test
+  ```
+  ### How the integration tests work
+1. **In‑memory MongoDB**  
+   Uses `mongodb-memory-server` to launch a throw‑away database in RAM, so your code connects to a real Mongo instance without external setup.
+
+2. **Express wrapper for API routes**  
+   A tiny server in `integration-tests/testServer.js` mounts your Next.js `/api/decks` handler under Express. This runs the exact same code that the deployed API uses.
+
+3. **Auth & routing mocks**  
+   - The real `verifyToken()` is stubbed so every request appears authenticated.  
+   - `next/navigation`’s `useRouter()` is mocked to prevent errors from `router.push()` calls.
+
+4. **Axios override with Supertest**  
+   Instead of going through jsdom’s XHR (which has CORS restrictions), `axios.post` is replaced to call `supertest(server).post(...)`. This still exercises your real handler and database logic.
+
+5. **React Testing Library drives the form**  
+   The test renders `<AddDeckForm />`, types into the “Deck Name” input, clicks “Create Deck,” then asserts on UI updates (success message) and database state via `request.get('/api/decks')`.
+
+6. **Assertions on both UI and data**  
+   - Verifies the success message appears in the component.  
+   - Confirms the new deck exists by querying the same in‑process API and inspecting the in‑memory database.
+
+### Integration vs. Unit Tests
+| Aspect            | Unit Tests                                            | Integration Tests                                                                                   |
+|-------------------|-------------------------------------------------------|-----------------------------------------------------------------------------------------------------|
+| **Scope**         | One function or component in isolation, with dependencies mocked. | Multiple layers (component → network → API → database) working together as in production.           |
+| **Speed**         | Very fast, no I/O.                                    | Slower, but still quick (in‑memory DB + mini‑server).                                               |
+| **Isolation**     | Mocks all external calls.                             | Mocks only auth and router; everything else runs un‑mocked against real code.                       |
+| **Purpose**       | Verify individual logic and edge cases.               | Verify end‑to‑end workflows and catch integration bugs (e.g., schema mismatches, mis‑wiring).      |
+| **Complexity**    | Simple setup.                                         | More setup (global hooks, teardown, wrapper server), but higher confidence in full‑path behavior.   |
diff --git a/lib/mongo.js b/lib/mongo.js
index 3128915..8039f4c 100644
--- a/lib/mongo.js
+++ b/lib/mongo.js
@@ -1,6 +1,6 @@
 import { MongoClient } from 'mongodb';
 
-const uri = process.env.MONGODB_URI;
+const uri = process.env.TEST_MONGO_URI || process.env.MONGODB_URI;
 const options = {};
 
 let client;
diff --git a/package.json b/package.json
index 4a1a14c..9503a67 100644
--- a/package.json
+++ b/package.json
@@ -6,7 +6,12 @@
     "dev": "next dev --turbopack",
     "build": "next build",
     "start": "next start",
-    "lint": "next lint"
+    "lint": "next lint",
+    "test": "jest",
+    "test:watch": "jest --watch",
+    "test:ci": "jest --passWithNoTests --coverage",
+    "test:unit": "jest __tests__",
+    "test:int": "jest integration-tests"
   },
   "dependencies": {
     "@headlessui/react": "^2.2.0",
@@ -32,10 +37,24 @@
     "react-scroll": "^1.9.3"
   },
   "devDependencies": {
+    "@babel/core": "^7.26.10",
+    "@babel/preset-env": "^7.26.9",
+    "@babel/preset-react": "^7.26.3",
     "@eslint/eslintrc": "^3",
     "@tailwindcss/postcss": "^4.0.12",
+    "@testing-library/jest-dom": "^6.6.3",
+    "@testing-library/react": "^16.3.0",
+    "@testing-library/user-event": "^14.6.1",
+    "babel-jest": "^29.7.0",
     "eslint": "^9",
     "eslint-config-next": "15.2.1",
-    "tailwindcss": "^4.0.12"
+    "identity-obj-proxy": "^3.0.0",
+    "jest": "^29.7.0",
+    "jest-environment-jsdom": "^29.7.0",
+    "mongodb-memory-server": "^10.1.4",
+    "node-mocks-http": "^1.16.2",
+    "supertest": "^7.1.0",
+    "tailwindcss": "^4.0.12",
+    "why-is-node-running": "^3.2.2"
   }
 }
